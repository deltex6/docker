# Obraz bazowy node alpine
FROM node:24-alpine AS nodebuilder

#pobieranie nowej wersji pakietu
RUN apk add --update --no-cache pkg:golang/stdlib@1.23.8

# RUN go install github.com/x/y@latest \
#  && cp $GOPATH/bin/package /usr/local/bin/


# Zainstaluj Go
# ENV GOLANG_VERSION=1.23.8
# RUN wget https://go.dev/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz && \
#     tar -C /usr/local -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz && \
#     rm go${GOLANG_VERSION}.linux-amd64.tar.gz

# Ustaw zmienne środowiskowe
ENV PATH="/usr/local/go/bin:${PATH}"

# Sprawdź wersję Go
RUN go version


# Uzycie zmiennej wersji
ARG VERSION
ENV VERSION=${VERSION}


# Ustawienie katalogu roboczego
WORKDIR /app

# Kopiowanie plikow package
COPY package.json .

# Instalacja zaleznosci produkcyjnych
RUN npm install --production

# Kopiowanie pozostalych plikow aplikacji
COPY . .

# Etap 2: Obraz koncowy
FROM nodebuilder

# Skopiowanie aplikacji z poprzedniego etapu
COPY --from=nodebuilder /app /app

# Dodanie pliku konfiguracyjnego 'JSON'
COPY config.json /app/config.json

# Dodanie metadanych autora
LABEL author="Tomasz Persa"
 
# Eksponowanie portu
EXPOSE 3000

# Sprawdzanie, czy serwer dziala
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \
	CMD wget --spider --quiet http://localhost:3000 || exit 1

# Uruchomienie aplikacji
CMD ["npm", "start"]
